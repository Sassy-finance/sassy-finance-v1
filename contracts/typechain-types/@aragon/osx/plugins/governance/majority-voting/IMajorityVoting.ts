/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IMajorityVotingInterface extends utils.Interface {
  functions: {
    "canExecute(uint256)": FunctionFragment;
    "canVote(uint256,address,uint8)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getVoteOption(uint256,address)": FunctionFragment;
    "isMinParticipationReached(uint256)": FunctionFragment;
    "isSupportThresholdReached(uint256)": FunctionFragment;
    "isSupportThresholdReachedEarly(uint256)": FunctionFragment;
    "minParticipation()": FunctionFragment;
    "supportThreshold()": FunctionFragment;
    "vote(uint256,uint8,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canExecute"
      | "canVote"
      | "execute"
      | "getVoteOption"
      | "isMinParticipationReached"
      | "isSupportThresholdReached"
      | "isSupportThresholdReachedEarly"
      | "minParticipation"
      | "supportThreshold"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canExecute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteOption",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMinParticipationReached",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportThresholdReached",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportThresholdReachedEarly",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minParticipation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMinParticipationReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportThresholdReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportThresholdReachedEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "VoteCast(uint256,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface VoteCastEventObject {
  proposalId: BigNumber;
  voter: string;
  voteOption: number;
  votingPower: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface IMajorityVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMajorityVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minParticipation(overrides?: CallOverrides): Promise<[number]>;

    supportThreshold(overrides?: CallOverrides): Promise<[number]>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canExecute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canVote(
    _proposalId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    _voteOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  execute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVoteOption(
    _proposalId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  isMinParticipationReached(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportThresholdReached(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportThresholdReachedEarly(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minParticipation(overrides?: CallOverrides): Promise<number>;

  supportThreshold(overrides?: CallOverrides): Promise<number>;

  vote(
    _proposalId: PromiseOrValue<BigNumberish>,
    _voteOption: PromiseOrValue<BigNumberish>,
    _tryEarlyExecution: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minParticipation(overrides?: CallOverrides): Promise<number>;

    supportThreshold(overrides?: CallOverrides): Promise<number>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "VoteCast(uint256,address,uint8,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      voteOption?: null,
      votingPower?: null
    ): VoteCastEventFilter;
    VoteCast(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      voteOption?: null,
      votingPower?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minParticipation(overrides?: CallOverrides): Promise<BigNumber>;

    supportThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minParticipation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
