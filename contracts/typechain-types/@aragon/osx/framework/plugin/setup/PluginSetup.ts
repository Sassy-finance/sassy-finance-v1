/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: PromiseOrValue<BigNumberish>;
    where: PromiseOrValue<string>;
    who: PromiseOrValue<string>;
    condition: PromiseOrValue<string>;
    permissionId: PromiseOrValue<BytesLike>;
  };

  export type MultiTargetPermissionStructOutput = [
    number,
    string,
    string,
    string,
    string
  ] & {
    operation: number;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };
}

export declare namespace IPluginSetup {
  export type PreparedSetupDataStruct = {
    helpers: PromiseOrValue<string>[];
    permissions: PermissionLib.MultiTargetPermissionStruct[];
  };

  export type PreparedSetupDataStructOutput = [
    string[],
    PermissionLib.MultiTargetPermissionStructOutput[]
  ] & {
    helpers: string[];
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  };

  export type SetupPayloadStruct = {
    plugin: PromiseOrValue<string>;
    currentHelpers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>;
  };

  export type SetupPayloadStructOutput = [string, string[], string] & {
    plugin: string;
    currentHelpers: string[];
    data: string;
  };
}

export interface PluginSetupInterface extends utils.Interface {
  functions: {
    "implementation()": FunctionFragment;
    "prepareInstallation(address,bytes)": FunctionFragment;
    "prepareUninstallation(address,(address,address[],bytes))": FunctionFragment;
    "prepareUpdate(address,uint16,(address,address[],bytes))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "implementation"
      | "prepareInstallation"
      | "prepareUninstallation"
      | "prepareUpdate"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepareInstallation",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUninstallation",
    values: [PromiseOrValue<string>, IPluginSetup.SetupPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUpdate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IPluginSetup.SetupPayloadStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUninstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PluginSetup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PluginSetupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    implementation(overrides?: CallOverrides): Promise<[string]>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  implementation(overrides?: CallOverrides): Promise<string>;

  prepareInstallation(
    _dao: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prepareUninstallation(
    _dao: PromiseOrValue<string>,
    _payload: IPluginSetup.SetupPayloadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prepareUpdate(
    _dao: PromiseOrValue<string>,
    _currentBuild: PromiseOrValue<BigNumberish>,
    _payload: IPluginSetup.SetupPayloadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    implementation(overrides?: CallOverrides): Promise<string>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        plugin: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    >;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<PermissionLib.MultiTargetPermissionStructOutput[]>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        initData: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    >;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
