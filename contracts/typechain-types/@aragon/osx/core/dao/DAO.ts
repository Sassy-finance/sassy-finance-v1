/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IDAO {
  export type ActionStruct = {
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
  };
}

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: PromiseOrValue<BigNumberish>;
    where: PromiseOrValue<string>;
    who: PromiseOrValue<string>;
    condition: PromiseOrValue<string>;
    permissionId: PromiseOrValue<BytesLike>;
  };

  export type MultiTargetPermissionStructOutput = [
    number,
    string,
    string,
    string,
    string
  ] & {
    operation: number;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };

  export type SingleTargetPermissionStruct = {
    operation: PromiseOrValue<BigNumberish>;
    who: PromiseOrValue<string>;
    permissionId: PromiseOrValue<BytesLike>;
  };

  export type SingleTargetPermissionStructOutput = [number, string, string] & {
    operation: number;
    who: string;
    permissionId: string;
  };
}

export interface DAOInterface extends utils.Interface {
  functions: {
    "EXECUTE_PERMISSION_ID()": FunctionFragment;
    "REGISTER_STANDARD_CALLBACK_PERMISSION_ID()": FunctionFragment;
    "ROOT_PERMISSION_ID()": FunctionFragment;
    "SET_METADATA_PERMISSION_ID()": FunctionFragment;
    "SET_SIGNATURE_VALIDATOR_PERMISSION_ID()": FunctionFragment;
    "SET_TRUSTED_FORWARDER_PERMISSION_ID()": FunctionFragment;
    "UPGRADE_DAO_PERMISSION_ID()": FunctionFragment;
    "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": FunctionFragment;
    "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": FunctionFragment;
    "daoURI()": FunctionFragment;
    "deposit(address,uint256,string)": FunctionFragment;
    "execute(bytes32,(address,uint256,bytes)[],uint256)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "grant(address,address,bytes32)": FunctionFragment;
    "grantWithCondition(address,address,bytes32,address)": FunctionFragment;
    "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
    "initialize(bytes,address,address,string)": FunctionFragment;
    "isGranted(address,address,bytes32,bytes)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerStandardCallback(bytes4,bytes4,bytes4)": FunctionFragment;
    "revoke(address,address,bytes32)": FunctionFragment;
    "setDaoURI(string)": FunctionFragment;
    "setMetadata(bytes)": FunctionFragment;
    "setSignatureValidator(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "signatureValidator()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXECUTE_PERMISSION_ID"
      | "REGISTER_STANDARD_CALLBACK_PERMISSION_ID"
      | "ROOT_PERMISSION_ID"
      | "SET_METADATA_PERMISSION_ID"
      | "SET_SIGNATURE_VALIDATOR_PERMISSION_ID"
      | "SET_TRUSTED_FORWARDER_PERMISSION_ID"
      | "UPGRADE_DAO_PERMISSION_ID"
      | "applyMultiTargetPermissions"
      | "applySingleTargetPermissions"
      | "daoURI"
      | "deposit"
      | "execute"
      | "getTrustedForwarder"
      | "grant"
      | "grantWithCondition"
      | "hasPermission"
      | "initialize"
      | "isGranted"
      | "isValidSignature"
      | "proxiableUUID"
      | "registerStandardCallback"
      | "revoke"
      | "setDaoURI"
      | "setMetadata"
      | "setSignatureValidator"
      | "setTrustedForwarder"
      | "signatureValidator"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXECUTE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_SIGNATURE_VALIDATOR_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMultiTargetPermissions",
    values: [PermissionLib.MultiTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applySingleTargetPermissions",
    values: [
      PromiseOrValue<string>,
      PermissionLib.SingleTargetPermissionStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<BytesLike>,
      IDAO.ActionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantWithCondition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStandardCallback",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_METADATA_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_SIGNATURE_VALIDATOR_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_TRUSTED_FORWARDER_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_DAO_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMultiTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySingleTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStandardCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDaoURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CallbackReceived(address,bytes4,bytes)": EventFragment;
    "Deposited(address,address,uint256,string)": EventFragment;
    "Executed(address,bytes32,tuple[],uint256,bytes[])": EventFragment;
    "Granted(bytes32,address,address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetadataSet(bytes)": EventFragment;
    "NativeTokenDeposited(address,uint256)": EventFragment;
    "NewURI(string)": EventFragment;
    "Revoked(bytes32,address,address,address)": EventFragment;
    "SignatureValidatorSet(address)": EventFragment;
    "StandardCallbackRegistered(bytes4,bytes4,bytes4)": EventFragment;
    "TrustedForwarderSet(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallbackReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Granted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeTokenDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureValidatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StandardCallbackRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CallbackReceivedEventObject {
  sender: string;
  sig: string;
  data: string;
}
export type CallbackReceivedEvent = TypedEvent<
  [string, string, string],
  CallbackReceivedEventObject
>;

export type CallbackReceivedEventFilter =
  TypedEventFilter<CallbackReceivedEvent>;

export interface DepositedEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
  _reference: string;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, string],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface ExecutedEventObject {
  actor: string;
  callId: string;
  actions: IDAO.ActionStructOutput[];
  failureMap: BigNumber;
  execResults: string[];
}
export type ExecutedEvent = TypedEvent<
  [string, string, IDAO.ActionStructOutput[], BigNumber, string[]],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface GrantedEventObject {
  permissionId: string;
  here: string;
  where: string;
  who: string;
  condition: string;
}
export type GrantedEvent = TypedEvent<
  [string, string, string, string, string],
  GrantedEventObject
>;

export type GrantedEventFilter = TypedEventFilter<GrantedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetadataSetEventObject {
  metadata: string;
}
export type MetadataSetEvent = TypedEvent<[string], MetadataSetEventObject>;

export type MetadataSetEventFilter = TypedEventFilter<MetadataSetEvent>;

export interface NativeTokenDepositedEventObject {
  sender: string;
  amount: BigNumber;
}
export type NativeTokenDepositedEvent = TypedEvent<
  [string, BigNumber],
  NativeTokenDepositedEventObject
>;

export type NativeTokenDepositedEventFilter =
  TypedEventFilter<NativeTokenDepositedEvent>;

export interface NewURIEventObject {
  daoURI: string;
}
export type NewURIEvent = TypedEvent<[string], NewURIEventObject>;

export type NewURIEventFilter = TypedEventFilter<NewURIEvent>;

export interface RevokedEventObject {
  permissionId: string;
  here: string;
  where: string;
  who: string;
}
export type RevokedEvent = TypedEvent<
  [string, string, string, string],
  RevokedEventObject
>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface SignatureValidatorSetEventObject {
  signatureValidator: string;
}
export type SignatureValidatorSetEvent = TypedEvent<
  [string],
  SignatureValidatorSetEventObject
>;

export type SignatureValidatorSetEventFilter =
  TypedEventFilter<SignatureValidatorSetEvent>;

export interface StandardCallbackRegisteredEventObject {
  interfaceId: string;
  callbackSelector: string;
  magicNumber: string;
}
export type StandardCallbackRegisteredEvent = TypedEvent<
  [string, string, string],
  StandardCallbackRegisteredEventObject
>;

export type StandardCallbackRegisteredEventFilter =
  TypedEventFilter<StandardCallbackRegisteredEvent>;

export interface TrustedForwarderSetEventObject {
  forwarder: string;
}
export type TrustedForwarderSetEvent = TypedEvent<
  [string],
  TrustedForwarderSetEventObject
>;

export type TrustedForwarderSetEventFilter =
  TypedEventFilter<TrustedForwarderSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    REGISTER_STANDARD_CALLBACK_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    SET_SIGNATURE_VALIDATOR_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SET_TRUSTED_FORWARDER_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoURI(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reference: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      _callId: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasPermission(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _metadata: PromiseOrValue<BytesLike>,
      _initialOwner: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      daoURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSignature(
      _hash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerStandardCallback(
      _interfaceId: PromiseOrValue<BytesLike>,
      _callbackSelector: PromiseOrValue<BytesLike>,
      _magicNumber: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoURI(
      newDaoURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadata(
      _metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSignatureValidator(
      _signatureValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      _newTrustedForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signatureValidator(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  REGISTER_STANDARD_CALLBACK_PERMISSION_ID(
    overrides?: CallOverrides
  ): Promise<string>;

  ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  SET_SIGNATURE_VALIDATOR_PERMISSION_ID(
    overrides?: CallOverrides
  ): Promise<string>;

  SET_TRUSTED_FORWARDER_PERMISSION_ID(
    overrides?: CallOverrides
  ): Promise<string>;

  UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  applyMultiTargetPermissions(
    _items: PermissionLib.MultiTargetPermissionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applySingleTargetPermissions(
    _where: PromiseOrValue<string>,
    items: PermissionLib.SingleTargetPermissionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoURI(overrides?: CallOverrides): Promise<string>;

  deposit(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _reference: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    _callId: PromiseOrValue<BytesLike>,
    _actions: IDAO.ActionStruct[],
    _allowFailureMap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  grant(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantWithCondition(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    _condition: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasPermission(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _metadata: PromiseOrValue<BytesLike>,
    _initialOwner: PromiseOrValue<string>,
    _trustedForwarder: PromiseOrValue<string>,
    daoURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGranted(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    _hash: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerStandardCallback(
    _interfaceId: PromiseOrValue<BytesLike>,
    _callbackSelector: PromiseOrValue<BytesLike>,
    _magicNumber: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoURI(
    newDaoURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadata(
    _metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSignatureValidator(
    _signatureValidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    _newTrustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signatureValidator(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    REGISTER_STANDARD_CALLBACK_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    SET_SIGNATURE_VALIDATOR_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    SET_TRUSTED_FORWARDER_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    daoURI(overrides?: CallOverrides): Promise<string>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reference: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _callId: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { execResults: string[]; failureMap: BigNumber }
    >;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasPermission(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _metadata: PromiseOrValue<BytesLike>,
      _initialOwner: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      daoURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      _hash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerStandardCallback(
      _interfaceId: PromiseOrValue<BytesLike>,
      _callbackSelector: PromiseOrValue<BytesLike>,
      _magicNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoURI(
      newDaoURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(
      _metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSignatureValidator(
      _signatureValidator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      _newTrustedForwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signatureValidator(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "CallbackReceived(address,bytes4,bytes)"(
      sender?: null,
      sig?: PromiseOrValue<BytesLike> | null,
      data?: null
    ): CallbackReceivedEventFilter;
    CallbackReceived(
      sender?: null,
      sig?: PromiseOrValue<BytesLike> | null,
      data?: null
    ): CallbackReceivedEventFilter;

    "Deposited(address,address,uint256,string)"(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      _reference?: null
    ): DepositedEventFilter;
    Deposited(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      _reference?: null
    ): DepositedEventFilter;

    "Executed(address,bytes32,tuple[],uint256,bytes[])"(
      actor?: PromiseOrValue<string> | null,
      callId?: null,
      actions?: null,
      failureMap?: null,
      execResults?: null
    ): ExecutedEventFilter;
    Executed(
      actor?: PromiseOrValue<string> | null,
      callId?: null,
      actions?: null,
      failureMap?: null,
      execResults?: null
    ): ExecutedEventFilter;

    "Granted(bytes32,address,address,address,address)"(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null,
      condition?: null
    ): GrantedEventFilter;
    Granted(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null,
      condition?: null
    ): GrantedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetadataSet(bytes)"(metadata?: null): MetadataSetEventFilter;
    MetadataSet(metadata?: null): MetadataSetEventFilter;

    "NativeTokenDeposited(address,uint256)"(
      sender?: null,
      amount?: null
    ): NativeTokenDepositedEventFilter;
    NativeTokenDeposited(
      sender?: null,
      amount?: null
    ): NativeTokenDepositedEventFilter;

    "NewURI(string)"(daoURI?: null): NewURIEventFilter;
    NewURI(daoURI?: null): NewURIEventFilter;

    "Revoked(bytes32,address,address,address)"(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null
    ): RevokedEventFilter;
    Revoked(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null
    ): RevokedEventFilter;

    "SignatureValidatorSet(address)"(
      signatureValidator?: null
    ): SignatureValidatorSetEventFilter;
    SignatureValidatorSet(
      signatureValidator?: null
    ): SignatureValidatorSetEventFilter;

    "StandardCallbackRegistered(bytes4,bytes4,bytes4)"(
      interfaceId?: null,
      callbackSelector?: null,
      magicNumber?: null
    ): StandardCallbackRegisteredEventFilter;
    StandardCallbackRegistered(
      interfaceId?: null,
      callbackSelector?: null,
      magicNumber?: null
    ): StandardCallbackRegisteredEventFilter;

    "TrustedForwarderSet(address)"(
      forwarder?: null
    ): TrustedForwarderSetEventFilter;
    TrustedForwarderSet(forwarder?: null): TrustedForwarderSetEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    EXECUTE_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTER_STANDARD_CALLBACK_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    SET_METADATA_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    SET_SIGNATURE_VALIDATOR_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SET_TRUSTED_FORWARDER_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UPGRADE_DAO_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoURI(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reference: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      _callId: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasPermission(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _metadata: PromiseOrValue<BytesLike>,
      _initialOwner: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      daoURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      _hash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerStandardCallback(
      _interfaceId: PromiseOrValue<BytesLike>,
      _callbackSelector: PromiseOrValue<BytesLike>,
      _magicNumber: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoURI(
      newDaoURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadata(
      _metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSignatureValidator(
      _signatureValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      _newTrustedForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signatureValidator(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXECUTE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTER_STANDARD_CALLBACK_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROOT_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_METADATA_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_SIGNATURE_VALIDATOR_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_TRUSTED_FORWARDER_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADE_DAO_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _reference: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _callId: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasPermission(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _metadata: PromiseOrValue<BytesLike>,
      _initialOwner: PromiseOrValue<string>,
      _trustedForwarder: PromiseOrValue<string>,
      daoURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      _hash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerStandardCallback(
      _interfaceId: PromiseOrValue<BytesLike>,
      _callbackSelector: PromiseOrValue<BytesLike>,
      _magicNumber: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoURI(
      newDaoURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadata(
      _metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSignatureValidator(
      _signatureValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      _newTrustedForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signatureValidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
