/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace IDAO {
  export type ActionStruct = {
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
  };
}

export interface IProposalInterface extends utils.Interface {
  functions: {
    "proposalCount()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "proposalCount"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
}

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  creator: string;
  startDate: BigNumber;
  endDate: BigNumber;
  metadata: string;
  actions: IDAO.ActionStructOutput[];
  allowFailureMap: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    IDAO.ActionStructOutput[],
    BigNumber
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface IProposal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProposalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;
  };

  estimateGas: {
    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
