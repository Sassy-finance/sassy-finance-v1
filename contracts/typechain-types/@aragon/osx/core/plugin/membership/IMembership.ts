/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IMembershipInterface extends utils.Interface {
  functions: {
    "isMember(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "isMember"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;

  events: {
    "MembersAdded(address[])": EventFragment;
    "MembersRemoved(address[])": EventFragment;
    "MembershipContractAnnounced(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MembersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembersRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipContractAnnounced"
  ): EventFragment;
}

export interface MembersAddedEventObject {
  members: string[];
}
export type MembersAddedEvent = TypedEvent<[string[]], MembersAddedEventObject>;

export type MembersAddedEventFilter = TypedEventFilter<MembersAddedEvent>;

export interface MembersRemovedEventObject {
  members: string[];
}
export type MembersRemovedEvent = TypedEvent<
  [string[]],
  MembersRemovedEventObject
>;

export type MembersRemovedEventFilter = TypedEventFilter<MembersRemovedEvent>;

export interface MembershipContractAnnouncedEventObject {
  definingContract: string;
}
export type MembershipContractAnnouncedEvent = TypedEvent<
  [string],
  MembershipContractAnnouncedEventObject
>;

export type MembershipContractAnnouncedEventFilter =
  TypedEventFilter<MembershipContractAnnouncedEvent>;

export interface IMembership extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMembershipInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isMember(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MembersAdded(address[])"(members?: null): MembersAddedEventFilter;
    MembersAdded(members?: null): MembersAddedEventFilter;

    "MembersRemoved(address[])"(members?: null): MembersRemovedEventFilter;
    MembersRemoved(members?: null): MembersRemovedEventFilter;

    "MembershipContractAnnounced(address)"(
      definingContract?: PromiseOrValue<string> | null
    ): MembershipContractAnnouncedEventFilter;
    MembershipContractAnnounced(
      definingContract?: PromiseOrValue<string> | null
    ): MembershipContractAnnouncedEventFilter;
  };

  estimateGas: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
