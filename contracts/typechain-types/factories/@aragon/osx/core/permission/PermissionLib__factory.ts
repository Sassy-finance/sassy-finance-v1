/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  PermissionLib,
  PermissionLibInterface,
} from "../../../../../@aragon/osx/core/permission/PermissionLib";

const _abi = [
  {
    inputs: [],
    name: "NO_CONDITION",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e3610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80636dd02a5b146038575b600080fd5b603e6052565b604051604991906094565b60405180910390f35b600081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006080826057565b9050919050565b608e816077565b82525050565b600060208201905060a760008301846087565b9291505056fea2646970667358221220ebbed204abf6b7ad426687640b4a43e6df94386bfec36e147501b311e54c2d9464736f6c63430008110033";

type PermissionLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermissionLib__factory extends ContractFactory {
  constructor(...args: PermissionLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PermissionLib> {
    return super.deploy(overrides || {}) as Promise<PermissionLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PermissionLib {
    return super.attach(address) as PermissionLib;
  }
  override connect(signer: Signer): PermissionLib__factory {
    return super.connect(signer) as PermissionLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionLibInterface {
    return new utils.Interface(_abi) as PermissionLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PermissionLib {
    return new Contract(address, _abi, signerOrProvider) as PermissionLib;
  }
}
