/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IDAO {
  export type ActionStruct = {
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
  };
}

export declare namespace MajorityVotingBase {
  export type ProposalParametersStruct = {
    votingMode: PromiseOrValue<BigNumberish>;
    supportThreshold: PromiseOrValue<BigNumberish>;
    startDate: PromiseOrValue<BigNumberish>;
    endDate: PromiseOrValue<BigNumberish>;
    snapshotBlock: PromiseOrValue<BigNumberish>;
    minVotingPower: PromiseOrValue<BigNumberish>;
  };

  export type ProposalParametersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    votingMode: number;
    supportThreshold: number;
    startDate: BigNumber;
    endDate: BigNumber;
    snapshotBlock: BigNumber;
    minVotingPower: BigNumber;
  };

  export type TallyStruct = {
    abstain: PromiseOrValue<BigNumberish>;
    yes: PromiseOrValue<BigNumberish>;
    no: PromiseOrValue<BigNumberish>;
  };

  export type TallyStructOutput = [BigNumber, BigNumber, BigNumber] & {
    abstain: BigNumber;
    yes: BigNumber;
    no: BigNumber;
  };

  export type VotingSettingsStruct = {
    votingMode: PromiseOrValue<BigNumberish>;
    supportThreshold: PromiseOrValue<BigNumberish>;
    minParticipation: PromiseOrValue<BigNumberish>;
    minDuration: PromiseOrValue<BigNumberish>;
    minProposerVotingPower: PromiseOrValue<BigNumberish>;
  };

  export type VotingSettingsStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    votingMode: number;
    supportThreshold: number;
    minParticipation: number;
    minDuration: BigNumber;
    minProposerVotingPower: BigNumber;
  };
}

export interface AddresslistVotingInterface extends utils.Interface {
  functions: {
    "UPDATE_ADDRESSES_PERMISSION_ID()": FunctionFragment;
    "UPDATE_VOTING_SETTINGS_PERMISSION_ID()": FunctionFragment;
    "UPGRADE_PLUGIN_PERMISSION_ID()": FunctionFragment;
    "addAddresses(address[])": FunctionFragment;
    "addresslistLength()": FunctionFragment;
    "addresslistLengthAtBlock(uint256)": FunctionFragment;
    "canExecute(uint256)": FunctionFragment;
    "canVote(uint256,address,uint8)": FunctionFragment;
    "createProposal(bytes,(address,uint256,bytes)[],uint256,uint64,uint64,uint8,bool)": FunctionFragment;
    "dao()": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getVoteOption(uint256,address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address,(uint8,uint32,uint32,uint64,uint256),address[])": FunctionFragment;
    "isListed(address)": FunctionFragment;
    "isListedAtBlock(address,uint256)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "isMinParticipationReached(uint256)": FunctionFragment;
    "isSupportThresholdReached(uint256)": FunctionFragment;
    "isSupportThresholdReachedEarly(uint256)": FunctionFragment;
    "minDuration()": FunctionFragment;
    "minParticipation()": FunctionFragment;
    "minProposerVotingPower()": FunctionFragment;
    "pluginType()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeAddresses(address[])": FunctionFragment;
    "supportThreshold()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalVotingPower(uint256)": FunctionFragment;
    "updateVotingSettings((uint8,uint32,uint32,uint64,uint256))": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vote(uint256,uint8,bool)": FunctionFragment;
    "votingMode()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UPDATE_ADDRESSES_PERMISSION_ID"
      | "UPDATE_VOTING_SETTINGS_PERMISSION_ID"
      | "UPGRADE_PLUGIN_PERMISSION_ID"
      | "addAddresses"
      | "addresslistLength"
      | "addresslistLengthAtBlock"
      | "canExecute"
      | "canVote"
      | "createProposal"
      | "dao"
      | "execute"
      | "getProposal"
      | "getVoteOption"
      | "implementation"
      | "initialize"
      | "isListed"
      | "isListedAtBlock"
      | "isMember"
      | "isMinParticipationReached"
      | "isSupportThresholdReached"
      | "isSupportThresholdReachedEarly"
      | "minDuration"
      | "minParticipation"
      | "minProposerVotingPower"
      | "pluginType"
      | "proposalCount"
      | "proxiableUUID"
      | "removeAddresses"
      | "supportThreshold"
      | "supportsInterface"
      | "totalVotingPower"
      | "updateVotingSettings"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vote"
      | "votingMode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UPDATE_ADDRESSES_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_VOTING_SETTINGS_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAddresses",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addresslistLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addresslistLengthAtBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [
      PromiseOrValue<BytesLike>,
      IDAO.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteOption",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      MajorityVotingBase.VotingSettingsStruct,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isListedAtBlock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMinParticipationReached",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportThresholdReached",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportThresholdReachedEarly",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minParticipation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposerVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddresses",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotingPower",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingSettings",
    values: [MajorityVotingBase.VotingSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votingMode",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPDATE_ADDRESSES_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_VOTING_SETTINGS_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addresslistLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addresslistLengthAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isListedAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMinParticipationReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportThresholdReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportThresholdReachedEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposerVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votingMode", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MembersAdded(address[])": EventFragment;
    "MembersRemoved(address[])": EventFragment;
    "MembershipContractAnnounced(address)": EventFragment;
    "ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VoteCast(uint256,address,uint8,uint256)": EventFragment;
    "VotingSettingsUpdated(uint8,uint32,uint32,uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembersRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipContractAnnounced"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingSettingsUpdated"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MembersAddedEventObject {
  members: string[];
}
export type MembersAddedEvent = TypedEvent<[string[]], MembersAddedEventObject>;

export type MembersAddedEventFilter = TypedEventFilter<MembersAddedEvent>;

export interface MembersRemovedEventObject {
  members: string[];
}
export type MembersRemovedEvent = TypedEvent<
  [string[]],
  MembersRemovedEventObject
>;

export type MembersRemovedEventFilter = TypedEventFilter<MembersRemovedEvent>;

export interface MembershipContractAnnouncedEventObject {
  definingContract: string;
}
export type MembershipContractAnnouncedEvent = TypedEvent<
  [string],
  MembershipContractAnnouncedEventObject
>;

export type MembershipContractAnnouncedEventFilter =
  TypedEventFilter<MembershipContractAnnouncedEvent>;

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  creator: string;
  startDate: BigNumber;
  endDate: BigNumber;
  metadata: string;
  actions: IDAO.ActionStructOutput[];
  allowFailureMap: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    IDAO.ActionStructOutput[],
    BigNumber
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VoteCastEventObject {
  proposalId: BigNumber;
  voter: string;
  voteOption: number;
  votingPower: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VotingSettingsUpdatedEventObject {
  votingMode: number;
  supportThreshold: number;
  minParticipation: number;
  minDuration: BigNumber;
  minProposerVotingPower: BigNumber;
}
export type VotingSettingsUpdatedEvent = TypedEvent<
  [number, number, number, BigNumber, BigNumber],
  VotingSettingsUpdatedEventObject
>;

export type VotingSettingsUpdatedEventFilter =
  TypedEventFilter<VotingSettingsUpdatedEvent>;

export interface AddresslistVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddresslistVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UPDATE_ADDRESSES_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    UPDATE_VOTING_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    addAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addresslistLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    addresslistLengthAtBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        MajorityVotingBase.ProposalParametersStructOutput,
        MajorityVotingBase.TallyStructOutput,
        IDAO.ActionStructOutput[],
        BigNumber
      ] & {
        open: boolean;
        executed: boolean;
        parameters: MajorityVotingBase.ProposalParametersStructOutput;
        tally: MajorityVotingBase.TallyStructOutput;
        actions: IDAO.ActionStructOutput[];
        allowFailureMap: BigNumber;
      }
    >;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _dao: PromiseOrValue<string>,
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isListed(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isListedAtBlock(
      _account: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minParticipation(overrides?: CallOverrides): Promise<[number]>;

    minProposerVotingPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    pluginType(overrides?: CallOverrides): Promise<[number]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportThreshold(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalVotingPower(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateVotingSettings(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingMode(overrides?: CallOverrides): Promise<[number]>;
  };

  UPDATE_ADDRESSES_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  UPDATE_VOTING_SETTINGS_PERMISSION_ID(
    overrides?: CallOverrides
  ): Promise<string>;

  UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  addAddresses(
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addresslistLength(overrides?: CallOverrides): Promise<BigNumber>;

  addresslistLengthAtBlock(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canExecute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canVote(
    _proposalId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    _voteOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createProposal(
    _metadata: PromiseOrValue<BytesLike>,
    _actions: IDAO.ActionStruct[],
    _allowFailureMap: PromiseOrValue<BigNumberish>,
    _startDate: PromiseOrValue<BigNumberish>,
    _endDate: PromiseOrValue<BigNumberish>,
    _voteOption: PromiseOrValue<BigNumberish>,
    _tryEarlyExecution: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  execute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      MajorityVotingBase.ProposalParametersStructOutput,
      MajorityVotingBase.TallyStructOutput,
      IDAO.ActionStructOutput[],
      BigNumber
    ] & {
      open: boolean;
      executed: boolean;
      parameters: MajorityVotingBase.ProposalParametersStructOutput;
      tally: MajorityVotingBase.TallyStructOutput;
      actions: IDAO.ActionStructOutput[];
      allowFailureMap: BigNumber;
    }
  >;

  getVoteOption(
    _proposalId: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    _dao: PromiseOrValue<string>,
    _votingSettings: MajorityVotingBase.VotingSettingsStruct,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isListed(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isListedAtBlock(
    _account: PromiseOrValue<string>,
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinParticipationReached(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportThresholdReached(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportThresholdReachedEarly(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minParticipation(overrides?: CallOverrides): Promise<number>;

  minProposerVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

  pluginType(overrides?: CallOverrides): Promise<number>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeAddresses(
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportThreshold(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalVotingPower(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateVotingSettings(
    _votingSettings: MajorityVotingBase.VotingSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    _proposalId: PromiseOrValue<BigNumberish>,
    _voteOption: PromiseOrValue<BigNumberish>,
    _tryEarlyExecution: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingMode(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    UPDATE_ADDRESSES_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    UPDATE_VOTING_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    addAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addresslistLength(overrides?: CallOverrides): Promise<BigNumber>;

    addresslistLengthAtBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        MajorityVotingBase.ProposalParametersStructOutput,
        MajorityVotingBase.TallyStructOutput,
        IDAO.ActionStructOutput[],
        BigNumber
      ] & {
        open: boolean;
        executed: boolean;
        parameters: MajorityVotingBase.ProposalParametersStructOutput;
        tally: MajorityVotingBase.TallyStructOutput;
        actions: IDAO.ActionStructOutput[];
        allowFailureMap: BigNumber;
      }
    >;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      _dao: PromiseOrValue<string>,
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isListed(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isListedAtBlock(
      _account: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minParticipation(overrides?: CallOverrides): Promise<number>;

    minProposerVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    pluginType(overrides?: CallOverrides): Promise<number>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportThreshold(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalVotingPower(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateVotingSettings(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingMode(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MembersAdded(address[])"(members?: null): MembersAddedEventFilter;
    MembersAdded(members?: null): MembersAddedEventFilter;

    "MembersRemoved(address[])"(members?: null): MembersRemovedEventFilter;
    MembersRemoved(members?: null): MembersRemovedEventFilter;

    "MembershipContractAnnounced(address)"(
      definingContract?: PromiseOrValue<string> | null
    ): MembershipContractAnnouncedEventFilter;
    MembershipContractAnnounced(
      definingContract?: PromiseOrValue<string> | null
    ): MembershipContractAnnouncedEventFilter;

    "ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "VoteCast(uint256,address,uint8,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      voteOption?: null,
      votingPower?: null
    ): VoteCastEventFilter;
    VoteCast(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      voteOption?: null,
      votingPower?: null
    ): VoteCastEventFilter;

    "VotingSettingsUpdated(uint8,uint32,uint32,uint64,uint256)"(
      votingMode?: null,
      supportThreshold?: null,
      minParticipation?: null,
      minDuration?: null,
      minProposerVotingPower?: null
    ): VotingSettingsUpdatedEventFilter;
    VotingSettingsUpdated(
      votingMode?: null,
      supportThreshold?: null,
      minParticipation?: null,
      minDuration?: null,
      minProposerVotingPower?: null
    ): VotingSettingsUpdatedEventFilter;
  };

  estimateGas: {
    UPDATE_ADDRESSES_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UPDATE_VOTING_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    addAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addresslistLength(overrides?: CallOverrides): Promise<BigNumber>;

    addresslistLengthAtBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _dao: PromiseOrValue<string>,
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isListed(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isListedAtBlock(
      _account: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minParticipation(overrides?: CallOverrides): Promise<BigNumber>;

    minProposerVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    pluginType(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotingPower(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateVotingSettings(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingMode(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UPDATE_ADDRESSES_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_VOTING_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADE_PLUGIN_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addresslistLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addresslistLengthAtBlock(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      _voteOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteOption(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _dao: PromiseOrValue<string>,
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isListed(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isListedAtBlock(
      _account: PromiseOrValue<string>,
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinParticipationReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportThresholdReached(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportThresholdReachedEarly(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minParticipation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProposerVotingPower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAddresses(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotingPower(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateVotingSettings(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _proposalId: PromiseOrValue<BigNumberish>,
      _voteOption: PromiseOrValue<BigNumberish>,
      _tryEarlyExecution: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
