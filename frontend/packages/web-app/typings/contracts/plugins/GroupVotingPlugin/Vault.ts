/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: PromiseOrValue<BigNumberish>;
    where: PromiseOrValue<string>;
    who: PromiseOrValue<string>;
    condition: PromiseOrValue<string>;
    permissionId: PromiseOrValue<BytesLike>;
  };

  export type MultiTargetPermissionStructOutput = [
    number,
    string,
    string,
    string,
    string
  ] & {
    operation: number;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };

  export type SingleTargetPermissionStruct = {
    operation: PromiseOrValue<BigNumberish>;
    who: PromiseOrValue<string>;
    permissionId: PromiseOrValue<BytesLike>;
  };

  export type SingleTargetPermissionStructOutput = [number, string, string] & {
    operation: number;
    who: string;
    permissionId: string;
  };
}

export interface VaultInterface extends utils.Interface {
  functions: {
    "ROOT_PERMISSION_ID()": FunctionFragment;
    "WITHDRAW_ERC20_PERMISSION_ID()": FunctionFragment;
    "WITHDRAW_NFT_PERMISSION_ID()": FunctionFragment;
    "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": FunctionFragment;
    "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": FunctionFragment;
    "grant(address,address,bytes32)": FunctionFragment;
    "grantWithCondition(address,address,bytes32,address)": FunctionFragment;
    "isGranted(address,address,bytes32,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "revoke(address,address,bytes32)": FunctionFragment;
    "withdrawERC20(address,uint256,address)": FunctionFragment;
    "withdrawNFT(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROOT_PERMISSION_ID"
      | "WITHDRAW_ERC20_PERMISSION_ID"
      | "WITHDRAW_NFT_PERMISSION_ID"
      | "applyMultiTargetPermissions"
      | "applySingleTargetPermissions"
      | "grant"
      | "grantWithCondition"
      | "isGranted"
      | "onERC721Received"
      | "revoke"
      | "withdrawERC20"
      | "withdrawNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROOT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_ERC20_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_NFT_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMultiTargetPermissions",
    values: [PermissionLib.MultiTargetPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applySingleTargetPermissions",
    values: [
      PromiseOrValue<string>,
      PermissionLib.SingleTargetPermissionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantWithCondition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROOT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_ERC20_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_NFT_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMultiTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySingleTargetPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantWithCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {
    "Granted(bytes32,address,address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Revoked(bytes32,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Granted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export interface GrantedEventObject {
  permissionId: string;
  here: string;
  where: string;
  who: string;
  condition: string;
}
export type GrantedEvent = TypedEvent<
  [string, string, string, string, string],
  GrantedEventObject
>;

export type GrantedEventFilter = TypedEventFilter<GrantedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RevokedEventObject {
  permissionId: string;
  here: string;
  where: string;
  who: string;
}
export type RevokedEvent = TypedEvent<
  [string, string, string, string],
  RevokedEventObject
>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_ERC20_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_NFT_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNFT(
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_ERC20_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_NFT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  applyMultiTargetPermissions(
    _items: PermissionLib.MultiTargetPermissionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applySingleTargetPermissions(
    _where: PromiseOrValue<string>,
    items: PermissionLib.SingleTargetPermissionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grant(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantWithCondition(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    _condition: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGranted(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  revoke(
    _where: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    _permissionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNFT(
    _tokenAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_ERC20_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_NFT_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNFT(
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Granted(bytes32,address,address,address,address)"(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null,
      condition?: null
    ): GrantedEventFilter;
    Granted(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null,
      condition?: null
    ): GrantedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Revoked(bytes32,address,address,address)"(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null
    ): RevokedEventFilter;
    Revoked(
      permissionId?: PromiseOrValue<BytesLike> | null,
      here?: PromiseOrValue<string> | null,
      where?: null,
      who?: PromiseOrValue<string> | null
    ): RevokedEventFilter;
  };

  estimateGas: {
    ROOT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_ERC20_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_NFT_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNFT(
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROOT_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAW_ERC20_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAW_NFT_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyMultiTargetPermissions(
      _items: PermissionLib.MultiTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applySingleTargetPermissions(
      _where: PromiseOrValue<string>,
      items: PermissionLib.SingleTargetPermissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grant(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantWithCondition(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _condition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGranted(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revoke(
      _where: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      _permissionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
